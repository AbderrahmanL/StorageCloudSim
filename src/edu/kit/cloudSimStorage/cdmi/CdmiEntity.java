/*
 * Title:        StorageCloudSim
 * Description:  StorageCloudSim (Storage as a Service Cloud Simulation), an extension for CloudSim
 * Licence:      GPL - http://www.gnu.org/copyleft/gpl.html
 *
 * Copyright (c) 2013, Karlsruhe Institute of Technology, Germany
 * https://github.com/toebbel/StorageCloudSim
 * http://www.tobiassturm.de/projects/storagecloudsim.html
 */
package edu.kit.cloudSimStorage.cdmi;

/**
 * Instances of this class represent any entity inside a CDMI-system, that is addressable via ID or name.
 * <p/>
 * IDs are {@link edu.kit.cloudSimStorage.StorageCloud}-wide unique and are generated by {@code CdmiId}.
 * Names are unique within a {@link CdmiContainer} and are always case-sensitive.
 * <p/>
 * Two entities are equal, if they have the same ID within the same rootURI, except of of the is the
 * {@link CdmiId#UNKNOWN} ID. If one ID is {@link CdmiId#UNKNOWN}, two Entities are defined as equal, if they have the
 * same rootUri, same parents (can be null) and share the same name (case-sensitive, non-empty).
 * <p/>
 * @author Tobias Sturm
 * Date: 4/26/13
 * Time: 1:00 PM
 */
public abstract class CdmiEntity {
	private CdmiId entityId = CdmiId.UNKNOWN;
	private String entityName;
	private CdmiEntity parent;
	private String rootURI;


	/**
	 * Creates an entity within the given rootURI and creates a uniqueID ({@link edu.kit.cloudSimStorage.cdmi.CdmiId#generateId(String)}
	 *
	 * @param rootURI the URI of the StorageCloud
	 */
	public CdmiEntity(String rootURI) {
		this.rootURI = rootURI;
		this.entityId = CdmiId.generateId(rootURI);
		parent = null;
	}

	/**
	 * Creates an entity within the same rootURI as the given parent. An unique ({@link edu.kit.cloudSimStorage.cdmi.CdmiId#generateId(String)} will be generated
	 *
	 * @param parent the parent of this entity
	 */
	public CdmiEntity(CdmiContainer parent) {
		assert parent != null;
		this.rootURI = parent.getRootURI();
		this.entityId = CdmiId.generateId(rootURI);
		this.parent = parent;
	}

	/**
	 * Returns the ID of this entity
	 *
	 * @return ID of this entity
	 */
	public CdmiId getEntityId() {
		return entityId;
	}

	/**
	 * Returns the name of this entity. Can be empty.
	 *
	 * @return the name of this entity
	 */
	public String getEntityName() {
		return entityName;
	}

	/**
	 * Sets the name of the entity (should only be called from a {@link CdmiContainer}-instance.
	 * <p/>
	 * The name can be set to empty, but only if the ID is not {@link CdmiId#UNKNOWN}
	 *
	 * @param name new name of the object
	 */
	void setEntityName(String name) {
		if ((name == null || name.trim().isEmpty()) && getEntityId().equals(CdmiId.UNKNOWN))
			throw new IllegalStateException("CdmiEntity can't have empty name AND unknown ID");
		entityName = name;
	}

	/**
	 * Returns the parent of this entity or {@code null} if there is no parent
	 *
	 * @return the parent of this entity
	 */
	public CdmiEntity getParent() {
		return parent;
	}

	/**
	 * Returns the root URI of the entity.
	 *
	 * @return root uri of entity.
	 */
	public String getRootURI() {
		return rootURI;
	}

	/**
	 * Returns the size of the entity and it's children. The size does not include the meta-data or meta-data of any child.
	 *
	 * @return size in disc in KByte
	 */
	public abstract long getSize();

	/**
	 * Returns the size of the entity that is used to store it on disc. The size includes all meta-data and the sum of the physical sizes of children.
	 *
	 * @return size on disc in KByte
	 */
	public abstract long getPhysicalSize();

	/** Call this method, if the entity gets destroyed. All children and associated physical data has to be removed. */
	public abstract void Destroy();

	@Override
	public boolean equals(Object obj) {
		if (obj == null || obj.getClass() != this.getClass())
			return false;
		if (this.getEntityId() != CdmiId.UNKNOWN && !((CdmiEntity) obj).getEntityId().equals(CdmiId.UNKNOWN))
			return getEntityId().equals(((CdmiEntity) obj).getEntityId());
		else
			return !getEntityName().trim().isEmpty()
					&& (getEntityName().equals(((CdmiEntity) obj).getEntityName())) &&
					(getParent() != null && getParent().equals(((CdmiEntity) obj).getParent())) &&
					getRootURI().equals(((CdmiEntity) obj).getRootURI());
	}
}
